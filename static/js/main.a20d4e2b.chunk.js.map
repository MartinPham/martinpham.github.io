{"version":3,"sources":["components/Effects.js","components/App.js","index.js"],"names":["Effects","composer","useRef","_useThree","useThree","scene","gl","size","camera","aspect","useMemo","THREE","width","height","useEffect","current","setSize","useFrame","render","react_default","a","createElement","ref","args","attachArray","kernelRadius","maxDistance","FXAAShader","material-uniforms-resolution-value","renderToScreen","extend","EffectComposer","ShaderPass","RenderPass","SSAOPass","UnrealBloomPass","_object","_color","Boxes","_useState","useState","_useState2","Object","slicedToArray","hovered","set","previous","colors","Array","fill","map","niceColors","Math","floor","random","colorArray","color","Float32Array","i","toArray","attrib","state","time","clock","getElapsedTime","rotation","x","sin","y","z","id","position","needsUpdate","scale","updateMatrix","setMatrixAt","matrix","instanceMatrix","onPointerMove","e","instanceId","onPointerOut","undefined","attach","attachObject","vertexColors","App","web","antialias","alpha","near","far","onCreated","_ref","toneMapping","setClearColor","intensity","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.a20d4e2b.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport React, { useRef, useEffect, useMemo } from 'react'\nimport { extend, useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\n\nextend({ EffectComposer, ShaderPass, RenderPass, SSAOPass, UnrealBloomPass })\n\nexport default function Effects() {\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  const aspect = useMemo(() => new THREE.Vector2(size.width, size.height), [size])\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => composer.current.render(), 1)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <sSAOPass attachArray=\"passes\" args={[scene, camera]} kernelRadius={0.6} maxDistance={0.03} />\n      <unrealBloomPass attachArray=\"passes\" args={[aspect, 2, 1, 0.991]} />\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n        renderToScreen\n      />\n    </effectComposer>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef, useMemo, useState, useEffect } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport niceColors from 'nice-color-palettes'\nimport Effects from './Effects'\nimport 'styles/index.css'\n\nconst _object = new THREE.Object3D()\nconst _color = new THREE.Color()\n\nfunction Boxes() {\n  const [hovered, set] = useState()\n  const previous = useRef()\n  useEffect(() => void (previous.current = hovered), [hovered])\n\n  const colors = useMemo(() => new Array(1000).fill().map(() => niceColors[17][Math.floor(Math.random() * 5)]), [])\n  const colorArray = useMemo(() => {\n    const color = new Float32Array(1000 * 3)\n    for (let i = 0; i < 1000; i++) {\n      _color.set(colors[i])\n      _color.toArray(color, i * 3)\n    }\n    return color\n  }, [colors])\n\n  const ref = useRef()\n  const attrib = useRef()\n  useFrame(state => {\n    const time = state.clock.getElapsedTime()\n    ref.current.rotation.x = Math.sin(time / 4)\n    ref.current.rotation.y = Math.sin(time / 2)\n    let i = 0\n    for (let x = 0; x < 10; x++)\n      for (let y = 0; y < 10; y++)\n        for (let z = 0; z < 10; z++) {\n          const id = i++\n          _object.position.set(5 - x, 5 - y, 5 - z)\n          _object.rotation.y = Math.sin(x / 4 + time) + Math.sin(y / 4 + time) + Math.sin(z / 4 + time)\n          _object.rotation.z = _object.rotation.y * 2\n          if (hovered !== previous.current) {\n            _color.set(id === hovered ? 'white' : colors[id])\n            _color.toArray(colorArray, id * 3)\n            attrib.current.needsUpdate = true\n          }\n          const scale = id === hovered ? 2 : 1\n          _object.scale.set(scale, scale, scale)\n          _object.updateMatrix()\n          ref.current.setMatrixAt(id, _object.matrix)\n        }\n    ref.current.instanceMatrix.needsUpdate = true\n  })\n\n  return (\n    <instancedMesh ref={ref} args={[null, null, 1000]} onPointerMove={e => set(e.instanceId)} onPointerOut={e => set(undefined)}>\n      <boxBufferGeometry attach=\"geometry\" args={[0.7, 0.7, 0.7]}>\n        <instancedBufferAttribute ref={attrib} attachObject={['attributes', 'color']} args={[colorArray, 3]} />\n      </boxBufferGeometry>\n      <meshPhongMaterial attach=\"material\" vertexColors={THREE.VertexColors} />\n    </instancedMesh>\n  )\n}\n\nexport default () => (\n  <Canvas\n    gl={{ antialias: false, alpha: false }}\n    camera={{ position: [0, 0, 15], near: 5, far: 20 }}\n    onCreated={({ gl }) => {\n      gl.toneMapping = THREE.Uncharted2ToneMapping\n      gl.setClearColor(new THREE.Color('black'))\n    }}>\n    <ambientLight />\n    <pointLight position={[150, 150, 150]} intensity={0.55} />\n    <Boxes />\n    <Effects />\n  </Canvas>\n)","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <App/>,\n  rootElement\n)\n"],"sourceRoot":""}